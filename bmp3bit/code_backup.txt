
        /*for (int y = 0; y < imageBmp.Width; y++)
        {
            for(int x = 0; x < imageBmp.Width; x++)
            {
                sw.Write(
                    imageBmp.GetPixel(x, y).R.ToString() + ',' + 
                    imageBmp.GetPixel(x, y).G.ToString() + ',' + 
                    imageBmp.GetPixel(x, y).B.ToString() + ' '
                    );    
            }

            sw.Write('\n');
        }*/

        /*for (int x = 0; x < imageBmp.Width; x++)
                   {
                       sw.Write(
                           (imageBmp.GetPixel(x, y).R > 127 ? "1" : "0") + 
                           (imageBmp.GetPixel(x, y).G > 127 ? "1" : "0") + 
                           (imageBmp.GetPixel(x, y).B > 127 ? "1" : "0") + ' '
                           );
                   }*/





				   
        private void MakeLineBuffer(ref ArrayList lineBuffer, int x, byte color)
        {
            color &= 0x07;

            x -= 1;

            int tailLenght = (x * 3 + 2) % 8;
            int tailByte = (x * 3 + 2) / 8;
            int headByte = (x * 3) / 8;

            byte headTemp = (byte)(0xff & int.Parse(lineBuffer[headByte].ToString()));
            byte tailTemp = (byte)(0xff & int.Parse(lineBuffer[tailByte].ToString()));

            Type t = lineBuffer[headByte].GetType();

            switch (tailLenght)
            {
                case 0:
                    lineBuffer[headByte] = (byte)((int)lineBuffer[headByte] & 0xfc);
                    lineBuffer[headByte] = (byte)((int)lineBuffer[headByte] | (color >> 1));

                    lineBuffer[tailByte] = (byte)((int)lineBuffer[tailByte] & 0b01111111);
                    lineBuffer[tailByte] = (byte)((int)lineBuffer[tailByte] | (color << 7));
                    break;

                case 1:
                    lineBuffer[headByte] = (byte)((int)lineBuffer[headByte] & 0b11111110);
                    lineBuffer[headByte] = (byte)((int)lineBuffer[headByte] | (color >> 2));

                    lineBuffer[tailByte] = (byte)((int)lineBuffer[tailByte] & 0b00111111);
                    lineBuffer[tailByte] = (byte)((int)lineBuffer[tailByte] | (color << 6));
                    break;

                default:
                    lineBuffer[headByte] = (byte)((int)lineBuffer[headByte] & ~(0b111 << (7 - tailLenght)));
                    lineBuffer[headByte] = (byte)((int)lineBuffer[headByte] | (color << (7 - tailLenght)));
                    break;
            }


            /*switch (tailLenght)
            {
                case 0:
                    lineBuffer[headByte] = 0x07 & (int.Parse(lineBuffer[headByte].ToString()) & 0xfc);
                    lineBuffer[headByte] = 0x07 & (int.Parse(lineBuffer[headByte].ToString()) | (color >> 1));

                    lineBuffer[tailByte] = 0x07 & (int.Parse(lineBuffer[tailByte].ToString()) & 0b01111111);
                    lineBuffer[tailByte] = 0x07 & (int.Parse(lineBuffer[tailByte].ToString()) | (color << 7));
                    break;

                case 1:
                    lineBuffer[headByte] = 0x07 & (int.Parse(lineBuffer[headByte].ToString()) & 0b11111110);
                    lineBuffer[headByte] = 0x07 & (int.Parse(lineBuffer[headByte].ToString()) | (color >> 2));

                    lineBuffer[tailByte] = 0x07 & (int.Parse(lineBuffer[tailByte].ToString()) & 0b00111111);
                    lineBuffer[tailByte] = 0x07 & (int.Parse(lineBuffer[tailByte].ToString()) | (color << 6));
                    break;

                default:
                    lineBuffer[headByte] = 0x07 & (int.Parse(lineBuffer[headByte].ToString()) & ~(0b111 << (7 - tailLenght)));
                    lineBuffer[headByte] = 0x07 & (int.Parse(lineBuffer[headByte].ToString()) | (color << (byte)(7 - tailLenght)));
                    break;
            }*/

            return;
        }

        







		
        private byte ColorToByte(Color c)
        {
            byte retVal = 0x00;

            if (c.R > 127)
            {
                retVal += 0x04;
            }

            if (c.G > 127)
            {
                retVal += 0x02;
            }

            if (c.B > 127)
            {
                retVal += 0x01;
            }

            return retVal;
        }











